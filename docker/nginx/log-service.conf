# Load JWT and cjson libraries in Lua
init_by_lua_block {
    jwt = require "resty.jwt"
    cjson = require "cjson"

    -- JWT configuration
    jwt_secret = os.getenv("JWT_SECRET") or "your-jwt-secret-key-for-production"
    jwt_issuer = os.getenv("JWT_ISSUER") or "passkeymesh-gateway"
    jwt_audience = os.getenv("JWT_AUDIENCE") or "backend-service"
    service_name = os.getenv("SERVICE_NAME") or "log-service"
}

# HTTP server
server {
    listen      6000;
    server_name localhost;

    # Static pages
    location / {
        root   /usr/share/nginx/html;
        index  index.html;
    }

    # /api route: validate JWT first, then return JSON
    location = /api {
        content_by_lua_block {
            local auth_header = ngx.req.get_headers()["Authorization"]
            local authenticated = false
            local user_info = nil
            local jwt_claims = nil

            -- If Authorization header exists, try to validate JWT
            if auth_header then
                -- Parse Bearer token
                local _, _, token = string.find(auth_header, "Bearer%s+(.+)")

                if token then
                    -- Use pcall to catch possible errors
                    local ok, result = pcall(function()
                        -- Simple parse JWT structure
                        local parts = {}
                        for part in string.gmatch(token, "[^%.]+") do
                            table.insert(parts, part)
                        end

                        if #parts ~= 3 then
                            ngx.log(ngx.ERR, "Invalid JWT format: wrong number of parts")
                            return nil
                        end

                        -- Decode payload
                        local payload_b64 = parts[2]
                        -- Add padding
                        local padding = 4 - ((#payload_b64) % 4)
                        if padding < 4 then
                            payload_b64 = payload_b64 .. string.rep("=", padding)
                        end
                        -- Replace URL safe characters
                        payload_b64 = string.gsub(payload_b64, "-", "+")
                        payload_b64 = string.gsub(payload_b64, "_", "/")

                        -- Decode Base64
                        local payload_json = ngx.decode_base64(payload_b64)
                        if not payload_json then
                            ngx.log(ngx.ERR, "Failed to decode JWT payload")
                            return nil
                        end

                        -- Parse JSON
                        local payload = cjson.decode(payload_json)
                        if not payload then
                            ngx.log(ngx.ERR, "Failed to parse JWT payload as JSON")
                            return nil
                        end

                        return payload
                    end)

                    if ok and result then
                        -- Validate JWT issuer and audience
                        if result.iss ~= jwt_issuer then
                            ngx.log(ngx.ERR, "Invalid JWT issuer: " .. (result.iss or "nil") .. ", expected: " .. jwt_issuer)
                        elseif result.aud ~= jwt_audience then
                            ngx.log(ngx.ERR, "Invalid JWT audience: " .. (result.aud or "nil") .. ", expected: " .. jwt_audience)
                        else
                            -- JWT validation succeeded
                            authenticated = true
                            jwt_claims = result
                            if result.name and result.sub then
                                user_info = result.name .. " (" .. result.sub .. ")"
                            else
                                user_info = "Authenticated User"
                            end
                        end
                    else
                        ngx.log(ngx.ERR, "JWT processing error: ", result or "unknown error")
                    end
                end
            end

            -- Prepare response
            local response = {
                status = "success",
                message = "Log Service API is working!",
                service = service_name,
                authenticated = authenticated
            }

            if user_info then
                response.user_info = user_info
            else
                response.user_info = cjson.null
            end

            if jwt_claims then
                response.jwt_claims = jwt_claims
            end

            -- Return JSON response
            ngx.header.content_type = "application/json"
            ngx.say(cjson.encode(response))
        }
    }
}

# HTTPS server
server {
    listen      6443 ssl;
    server_name localhost;

    # SSL certificate configuration
    ssl_certificate     /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;

    # Static pages
    location / {
        root   /usr/share/nginx/html;
        index  index.html;
    }

    # /api route: validate JWT first, then return JSON
    location = /api {
        content_by_lua_block {
            local auth_header = ngx.req.get_headers()["Authorization"]
            local authenticated = false
            local user_info = nil
            local jwt_claims = nil

            -- If Authorization header exists, try to validate JWT
            if auth_header then
                -- Parse Bearer token
                local _, _, token = string.find(auth_header, "Bearer%s+(.+)")

                if token then
                    -- Use pcall to catch possible errors
                    local ok, result = pcall(function()
                        -- Simple parse JWT structure
                        local parts = {}
                        for part in string.gmatch(token, "[^%.]+") do
                            table.insert(parts, part)
                        end

                        if #parts ~= 3 then
                            ngx.log(ngx.ERR, "Invalid JWT format: wrong number of parts")
                            return nil
                        end

                        -- Decode payload
                        local payload_b64 = parts[2]
                        -- Add padding
                        local padding = 4 - ((#payload_b64) % 4)
                        if padding < 4 then
                            payload_b64 = payload_b64 .. string.rep("=", padding)
                        end
                        -- Replace URL safe characters
                        payload_b64 = string.gsub(payload_b64, "-", "+")
                        payload_b64 = string.gsub(payload_b64, "_", "/")

                        -- Decode Base64
                        local payload_json = ngx.decode_base64(payload_b64)
                        if not payload_json then
                            ngx.log(ngx.ERR, "Failed to decode JWT payload")
                            return nil
                        end

                        -- Parse JSON
                        local payload = cjson.decode(payload_json)
                        if not payload then
                            ngx.log(ngx.ERR, "Failed to parse JWT payload as JSON")
                            return nil
                        end

                        return payload
                    end)

                    if ok and result then
                        -- Validate JWT issuer and audience
                        if result.iss ~= jwt_issuer then
                            ngx.log(ngx.ERR, "Invalid JWT issuer: " .. (result.iss or "nil") .. ", expected: " .. jwt_issuer)
                        elseif result.aud ~= jwt_audience then
                            ngx.log(ngx.ERR, "Invalid JWT audience: " .. (result.aud or "nil") .. ", expected: " .. jwt_audience)
                        else
                            -- JWT validation succeeded
                            authenticated = true
                            jwt_claims = result
                            if result.name and result.sub then
                                user_info = result.name .. " (" .. result.sub .. ")"
                            else
                                user_info = "Authenticated User"
                            end
                        end
                    else
                        ngx.log(ngx.ERR, "JWT processing error: ", result or "unknown error")
                    end
                end
            end

            -- Prepare response
            local response = {
                status = "success",
                message = "Log Service API is working! (HTTPS)",
                service = service_name,
                authenticated = authenticated
            }

            if user_info then
                response.user_info = user_info
            else
                response.user_info = cjson.null
            end

            if jwt_claims then
                response.jwt_claims = jwt_claims
            end

            -- Return JSON response
            ngx.header.content_type = "application/json"
            ngx.say(cjson.encode(response))
        }
    }
}
