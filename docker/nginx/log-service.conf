# Load JWT and cjson libraries in Lua
init_by_lua_block {
    jwt = require "resty.jwt"
    cjson = require "cjson"

    -- JWT configuration
    jwt_secret = os.getenv("JWT_SECRET") or "your-jwt-secret-key-for-production"
    jwt_issuer = os.getenv("JWT_ISSUER") or "passkeymesh-gateway"
    jwt_audience = os.getenv("JWT_AUDIENCE") or "backend-service"
    service_name = os.getenv("SERVICE_NAME") or "log-service"

    -- Function to validate JWT token
    function validate_jwt(token)
        if not token then
            return false, nil, "No token provided"
        end

        -- Verify the token with resty.jwt
        local jwt_obj = jwt:verify(jwt_secret, token)

        -- Check if token is valid
        if not jwt_obj.verified then
            return false, nil, "Invalid token signature: " .. (jwt_obj.reason or "unknown reason")
        end

        -- Validate issuer
        if jwt_obj.payload.iss ~= jwt_issuer then
            return false, nil, "Invalid issuer: " .. (jwt_obj.payload.iss or "nil") .. ", expected: " .. jwt_issuer
        end

        -- Validate expiration
        if jwt_obj.payload.exp and jwt_obj.payload.exp < ngx.time() then
            return false, nil, "Token expired"
        end

        -- Validate audience (support for array of audiences)
        local valid_audience = false
        local aud = jwt_obj.payload.aud

        if type(aud) == "table" then
            for _, v in ipairs(aud) do
                if v == jwt_audience then
                    valid_audience = true
                    break
                end
            end
        elseif aud == jwt_audience then
            valid_audience = true
        end

        if not valid_audience then
            local aud_type = type(aud)
            local aud_str = "nil"
            if aud_type == "table" then
                aud_str = "array[" .. #aud .. "]"
            elseif aud_type == "string" then
                aud_str = aud
            end
            return false, nil, "Invalid audience: " .. aud_str .. ", expected to include: " .. jwt_audience
        end

        -- Extract user info
        local user_info = nil
        if jwt_obj.payload.name and jwt_obj.payload.sub then
            user_info = jwt_obj.payload.name .. " (" .. jwt_obj.payload.sub .. ")"
        else
            user_info = "Authenticated User"
        end

        return true, user_info, nil, jwt_obj.payload
    end

    -- Function to handle API requests with JWT validation
    function handle_api_request(is_https)
        local auth_header = ngx.req.get_headers()["Authorization"]
        local authenticated = false
        local user_info = nil
        local jwt_claims = nil
        local error_message = nil

        -- If Authorization header exists, try to validate JWT
        if auth_header then
            -- Parse Bearer token
            local _, _, token = string.find(auth_header, "Bearer%s+(.+)")

            if token then
                authenticated, user_info, error_message, jwt_claims = validate_jwt(token)

                if error_message then
                    ngx.log(ngx.ERR, "JWT validation error: " .. error_message)
                end
            end
        end

        -- Prepare response
        local message_suffix = is_https and " (HTTPS)" or ""
        local response = {
            status = "success",
            message = "Log Service API is working!" .. message_suffix,
            service = service_name,
            authenticated = authenticated
        }

        if user_info then
            response.user_info = user_info
        else
            response.user_info = cjson.null
        end

        if jwt_claims then
            response.jwt_claims = jwt_claims
        end

        -- Return JSON response
        ngx.header.content_type = "application/json"
        ngx.say(cjson.encode(response))
    end
}

# HTTP server
server {
    listen      6000;
    server_name localhost;

    # Static pages
    location / {
        root   /usr/share/nginx/html;
        index  index.html;
    }

    # /api route: validate JWT first, then return JSON
    location = /api {
        content_by_lua_block {
            handle_api_request(false)
        }
    }
}

# HTTPS server
server {
    listen      6443 ssl;
    server_name localhost;

    # SSL certificate configuration
    ssl_certificate     /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;

    # Static pages
    location / {
        root   /usr/share/nginx/html;
        index  index.html;
    }

    # /api route: validate JWT first, then return JSON
    location = /api {
        content_by_lua_block {
            handle_api_request(true)
        }
    }
}
