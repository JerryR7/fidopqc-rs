# 在 Lua 里載入 JWT 庫
init_by_lua_block {
    jwt = require "resty.jwt"
}

server {
    listen      6000;
    server_name localhost;

    # 靜態頁面
    location / {
        root   /usr/share/nginx/html;
        index  index.html;
    }

    # /api 路由：先驗證 JWT，再返回 JSON
    location = /api {
        access_by_lua_block {
            local auth_header = ngx.var.http_Authorization
            if not auth_header then
                -- 如果沒有 Authorization 頭，允許訪問但標記為未認證
                ngx.ctx.authenticated = false
                ngx.ctx.user_info = nil
                return
            end

            -- 解析 Bearer token
            local _, _, token = string.find(auth_header, "Bearer%s+(.+)")
            if not token then
                -- 如果 token 格式不正確，允許訪問但標記為未認證
                ngx.ctx.authenticated = false
                ngx.ctx.user_info = nil
                return
            end

            -- 驗證簽章
            local jwt_obj

            -- 使用更安全的方式處理 JWT 驗證
            local ok, err = pcall(function()
                -- 創建 JWT 驗證選項
                local jwt_obj_local = jwt:load_jwt(token)

                if not jwt_obj_local.valid then
                    ngx.log(ngx.ERR, "Invalid JWT format")
                    return false
                end

                -- 手動驗證簽名
                local verified = jwt:verify_jwt_obj(
                    jwt_obj_local,
                    {
                        secret = "your-jwt-secret-key-for-development-only",
                        algorithm = "HS256"
                    }
                )

                if not verified.verified then
                    ngx.log(ngx.ERR, "JWT signature verification failed: ", verified.reason)
                    return false
                end

                jwt_obj = jwt_obj_local
                return true
            end)

            -- 如果驗證過程中出錯或驗證失敗
            if not ok or err == false then
                ngx.ctx.authenticated = false
                ngx.ctx.user_info = nil
                return
            end

            -- 驗證成功，標記為已認證並設置用戶信息
            ngx.ctx.authenticated = true

            -- 安全地訪問 payload
            if jwt_obj and jwt_obj.payload and type(jwt_obj.payload) == "table" then
                local name = jwt_obj.payload.name or "Unknown"
                local sub = jwt_obj.payload.sub or "Unknown"
                ngx.ctx.user_info = name .. " (" .. sub .. ")"
            else
                ngx.ctx.user_info = "Authenticated User"
            end
        }

        content_by_lua_block {
            local authenticated = ngx.ctx.authenticated or false
            local user_info = ngx.ctx.user_info

            local response = {
                status = "success",
                message = "Backend API is working!",
                authenticated = authenticated
            }

            if user_info then
                response.user_info = user_info
            else
                response.user_info = ngx.null
            end

            ngx.header.content_type = "application/json"
            ngx.say(require("cjson").encode(response))
        }
    }
}
