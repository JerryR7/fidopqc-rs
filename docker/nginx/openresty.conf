# 在 Lua 里載入 JWT 庫和 cjson 庫
init_by_lua_block {
    jwt = require "resty.jwt"
    cjson = require "cjson"

    -- JWT 配置
    jwt_secret = os.getenv("JWT_SECRET") or "your-jwt-secret-key-for-production"
    jwt_issuer = os.getenv("JWT_ISSUER") or "passkeymesh-gateway"
    jwt_audience = os.getenv("JWT_AUDIENCE") or "backend-service"
}

server {
    listen      6000;
    server_name localhost;

    # 靜態頁面
    location / {
        root   /usr/share/nginx/html;
        index  index.html;
    }

    # /api 路由：先驗證 JWT，再返回 JSON
    location = /api {
        content_by_lua_block {
            local auth_header = ngx.req.get_headers()["Authorization"]
            local authenticated = false
            local user_info = nil

            -- 如果有 Authorization 頭，嘗試驗證 JWT
            if auth_header then
                -- 解析 Bearer token
                local _, _, token = string.find(auth_header, "Bearer%s+(.+)")

                if token then
                    -- 使用 pcall 捕獲可能的錯誤
                    local ok, result = pcall(function()
                        -- 簡單解析 JWT 結構
                        local parts = {}
                        for part in string.gmatch(token, "[^%.]+") do
                            table.insert(parts, part)
                        end

                        if #parts ~= 3 then
                            ngx.log(ngx.ERR, "Invalid JWT format: wrong number of parts")
                            return nil
                        end

                        -- 解碼 payload
                        local payload_b64 = parts[2]
                        -- 添加填充
                        local padding = 4 - ((#payload_b64) % 4)
                        if padding < 4 then
                            payload_b64 = payload_b64 .. string.rep("=", padding)
                        end
                        -- 替換 URL 安全字符
                        payload_b64 = string.gsub(payload_b64, "-", "+")
                        payload_b64 = string.gsub(payload_b64, "_", "/")

                        -- 解碼 Base64
                        local payload_json = ngx.decode_base64(payload_b64)
                        if not payload_json then
                            ngx.log(ngx.ERR, "Failed to decode JWT payload")
                            return nil
                        end

                        -- 解析 JSON
                        local payload = cjson.decode(payload_json)
                        if not payload then
                            ngx.log(ngx.ERR, "Failed to parse JWT payload as JSON")
                            return nil
                        end

                        return payload
                    end)

                    if ok and result then
                        -- 驗證 JWT 發行者和受眾
                        if result.iss ~= jwt_issuer then
                            ngx.log(ngx.ERR, "Invalid JWT issuer: " .. (result.iss or "nil") .. ", expected: " .. jwt_issuer)
                        elseif result.aud ~= jwt_audience then
                            ngx.log(ngx.ERR, "Invalid JWT audience: " .. (result.aud or "nil") .. ", expected: " .. jwt_audience)
                        else
                            -- JWT 驗證成功
                            authenticated = true
                            if result.name and result.sub then
                                user_info = result.name .. " (" .. result.sub .. ")"
                            else
                                user_info = "Authenticated User"
                            end
                        end
                    else
                        ngx.log(ngx.ERR, "JWT processing error: ", result or "unknown error")
                    end
                end
            end

            -- 準備響應
            local response = {
                status = "success",
                message = "Backend API is working!",
                authenticated = authenticated
            }

            if user_info then
                response.user_info = user_info
            else
                response.user_info = cjson.null
            end

            -- 返回 JSON 響應
            ngx.header.content_type = "application/json"
            ngx.say(cjson.encode(response))
        }
    }
}
